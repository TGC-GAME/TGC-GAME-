<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width,initial-scale=1"/>
  <title>TGC GAME (Firebase)</title>
  <style>
    body{font-family:Arial, sans-serif;background:#f4f4f9;margin:0;padding:0;display:flex;flex-direction:column;align-items:center;min-height:100vh}
    header{width:100%;max-width:420px;padding:12px;text-align:center}
    .card{width:100%;max-width:420px;background:#fff;padding:16px;border-radius:12px;box-shadow:0 6px 16px rgba(0,0,0,0.08);margin:8px}
    #tapButton{width:140px;height:140px;border-radius:50%;background:gold;border:none;font-size:20px;font-weight:700;cursor:pointer}
    .small{font-size:13px;color:#555}
    .controls{display:flex;gap:8px;flex-wrap:wrap;justify-content:center;margin-top:12px}
    button{padding:8px 14px;border-radius:8px;border:none;cursor:pointer}
    #watchAd{background:#007bff;color:#fff} #withdraw{background:orange;color:#fff}
    .signin{display:flex;gap:8px;justify-content:center;margin-bottom:8px}
    .hidden{display:none}
  </style>
</head>
<body>
  <header><h2>ðŸª™ TGC GAME (Firebase Integrated)</h2></header>

  <div id="authCard" class="card">
    <div id="signedOutArea">
      <p class="small">Sign in to play and keep your coins safe across devices.</p>
      <div class="signin">
        <button id="googleSign">Sign in with Google</button>
        <button id="emailSign">Sign in (Email)</button>
      </div>
    </div>

    <div id="signedInArea" class="hidden">
      <p id="welcome" class="small"></p>
      <button id="signOutBtn">Sign out</button>
    </div>
  </div>

  <div id="gameCard" class="card hidden">
    <div style="text-align:center">
      <button id="tapButton">TAP</button>
      <div class="controls">
        <button id="watchAd">ðŸŽ¥ Watch (simulated)</button>
        <button id="withdraw">Withdraw</button>
      </div>
      <div style="margin-top:12px;text-align:left">
        <p>Taps: <span id="taps">0</span> / 500</p>
        <p>Blue: <span id="blue">0</span></p>
        <p>Yellow: <span id="yellow">0</span></p>
        <p>USD: $<span id="usd">0.00</span></p>
      </div>
    </div>
  </div>

  <div class="card">
    <p class="small">Note: Replace the firebaseConfig below with your project's config. Also deploy the Cloud Functions & Firestore rules provided.</p>
  </div>

  <!-- Firebase SDKs -->
  <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-app-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-auth-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-functions-compat.js"></script>

  <script>
    // ====== REPLACE this with your firebaseConfig from Firebase Console ======
    const firebaseConfig = {
      apiKey: "FIREBASE_APIKEY_HERE",
      authDomain: "FIREBASE_AUTHDOMAIN_HERE",
      projectId: "FIREBASE_PROJECTID_HERE",
      storageBucket: "FIREBASE_BUCKET_HERE",
      messagingSenderId: "FIREBASE_MSG_SENDER_HERE",
      appId: "FIREBASE_APPID_HERE"
    };
    // ======================================================================

    // initialize
    firebase.initializeApp(firebaseConfig);
    const auth = firebase.auth();
    const db = firebase.firestore();
    const functions = firebase.functions();

    // UI refs
    const authCard = document.getElementById('authCard');
    const signedOutArea = document.getElementById('signedOutArea');
    const signedInArea = document.getElementById('signedInArea');
    const welcome = document.getElementById('welcome');
    const signOutBtn = document.getElementById('signOutBtn');
    const googleSign = document.getElementById('googleSign');
    const emailSign = document.getElementById('emailSign');

    const gameCard = document.getElementById('gameCard');
    const tapBtn = document.getElementById('tapButton');
    const watchAdBtn = document.getElementById('watchAd');
    const withdrawBtn = document.getElementById('withdraw');
    const tapsEl = document.getElementById('taps');
    const blueEl = document.getElementById('blue');
    const yellowEl = document.getElementById('yellow');
    const usdEl = document.getElementById('usd');

    // local state (kept minimal; authoritative state is Firestore)
    let local = { taps:0, blue:0, yellow:0, usd:0 };
    let userDocUnsub = null;

    // Auth handlers
    googleSign.onclick = async () => {
      const provider = new firebase.auth.GoogleAuthProvider();
      try { await auth.signInWithPopup(provider); }
      catch(err){ alert('Sign-in error: '+err.message); }
    };

    emailSign.onclick = async () => {
      const email = prompt('Email:');
      const pass = prompt('Password (min 6 chars):');
      if(!email || !pass){ alert('Canceled'); return; }
      try {
        await auth.signInWithEmailAndPassword(email, pass);
      } catch(err) {
        // try create
        if(err.code === 'auth/user-not-found') {
          try {
            await auth.createUserWithEmailAndPassword(email, pass);
          } catch(e){ alert('Create error: '+e.message); }
        } else alert('Sign-in error: '+err.message);
      }
    };

    signOutBtn.onclick = () => auth.signOut();

    // listen auth changes
    auth.onAuthStateChanged(async (user) => {
      if(user){
        signedOutArea.classList.add('hidden');
        signedInArea.classList.remove('hidden');
        gameCard.classList.remove('hidden');
        welcome.textContent = `Hello, ${user.displayName || user.email}`;
        // ensure user doc exists (client-side safety) - server cloud function should also create
        const uRef = db.collection('users').doc(user.uid);
        const snap = await uRef.get();
        if(!snap.exists){
          await uRef.set({
            email: user.email || null,
            displayName: user.displayName || null,
            coins: {taps:0, blue:0, yellow:0, usd:0},
            createdAt: firebase.firestore.FieldValue.serverTimestamp()
          });
        }
        // subscribe to user doc
        if(userDocUnsub) userDocUnsub();
        userDocUnsub = uRef.onSnapshot(doc => {
          const d = doc.data();
          if(d && d.coins){
            local.taps = d.coins.taps || 0;
            local.blue = d.coins.blue || 0;
            local.yellow = d.coins.yellow || 0;
            local.usd = d.coins.usd || 0;
            render();
          }
        });
      } else {
        signedOutArea.classList.remove('hidden');
        signedInArea.classList.add('hidden');
        gameCard.classList.add('hidden');
        welcome.textContent = '';
        if(userDocUnsub) userDocUnsub();
        userDocUnsub = null;
      }
    });

    // UI render
    function render(){
      tapsEl.textContent = local.taps;
      blueEl.textContent = local.blue;
      yellowEl.textContent = local.yellow;
      usdEl.textContent = local.usd.toFixed(2);
    }

    // Helper: call server function to grant reward (safe)
    async function grantRewardServer(kind, amount, meta){
      const fn = functions.httpsCallable('grantRewardOnEvent');
      try {
        const res = await fn({ kind, amount, meta: meta || {} });
        // server returns updated coins; if not, Firestore listener will update
        if(res.data && res.data.coins) {
          local = res.data.coins;
          render();
        }
      } catch(err){
        alert('Server error: ' + (err.message || err));
      }
    }

    // TAP logic: we will *request* server to increment taps (safe path)
    tapBtn.addEventListener('click', async () => {
      // optimistic UI (optional)
      // but call server to do authoritative update
      await grantRewardServer('tap', 1, {ts: Date.now()});
    });

    // Watch Ad (simulated): ask server to grant 1 blue
    watchAdBtn.addEventListener('click', async () => {
      // In production, you should verify ad provider token on server
      if(!confirm('Simulate watching rewarded ad?')) return;
      await grantRewardServer('ad_complete', 1, {source:'simulated'});
      alert('Ad accounted (server). If server accepted, coins updated.');
    });

    withdrawBtn.addEventListener('click', async () => {
      // For demo: just check usd locally
      if(local.usd >= 5){
        // in production: create withdrawal transaction on server
        alert('Withdrawal requested. Server-side processing required.');
        await grantRewardServer('withdraw_request', 0, {});
      } else alert('Minimum withdraw $5');
    });

    // initial render
    render();
  </script>
</body>
</html>
